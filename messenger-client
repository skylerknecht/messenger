#!/usr/bin/env python3
import aiohttp
import asyncio
import argparse
import ssl
import struct
import urllib
import http.client

from abc import ABC, abstractmethod
from urllib import request
from collections import namedtuple

from messenger.message import MessageParser, MessageBuilder
from messenger.generator import alphanumeric_identifier, generate_hash

from messenger.message import (
    CheckInMessage,
    InitiateForwarderClientReq,
    InitiateForwarderClientRep,
    SendDataMessage
)

ForwarderClient = namedtuple('ForwarderClient', 'reader writer')

HTTP_ROUTE = 'socketio/?EIO=4&transport=polling'
WS_ROUTE = 'socketio/?EIO=4&transport=websocket'
USER_AGENT = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:128.0) Gecko/20100101 Firefox/128.0'


class MessengerClient(ABC):
    def __init__(self, encryption_key):
        self.encryption_key = encryption_key
        self.forwarder_clients = {}

        # Accept Self-Signed SSL Certs
        self.ssl_context = ssl.create_default_context()
        self.ssl_context.check_hostname = False
        self.ssl_context.verify_mode = ssl.CERT_NONE

        # Change User Agent
        self.headers = {'User-Agent': USER_AGENT}
        self.identifier = None

    async def handle_initiate_forwarder_client_req(self, message):
        try:
            reader, writer = await asyncio.wait_for(
                asyncio.open_connection(message['IP Address'], message['Port']),
                timeout=5  # Timeout after 5 seconds
            )
            self.forwarder_clients[message['Forwarder Client ID']] = ForwarderClient(reader, writer)
            bind_addr, bind_port = writer.get_extra_info('sockname')

            downstream_message = InitiateForwarderClientRep(
                forwarder_client_id=message['Forwarder Client ID'],
                bind_address=bind_addr,
                bind_port=bind_port,
                address_type=0,
                reason=0
            )
            asyncio.create_task(self.stream(message['Forwarder Client ID']))
        except Exception:
            downstream_message = InitiateForwarderClientRep(
                forwarder_client_id=message['Forwarder Client ID'],
                bind_address='',
                bind_port=0,
                address_type=0,
                reason=1
            )
        await self.send_downstream_message(downstream_message)

    async def start_remote_port_forwards(self, remote_port_forwards):
        for remote_port_forward in remote_port_forwards:
            remote_forward = RemotePortForwarder(self, remote_port_forward)
            await remote_forward.start()

    def serialize_messages(self, messages):
        data = b''
        for message in messages:
            data += MessageBuilder.serialize_message(self.encryption_key, message)
        return data

    def deserialize_messages(self, data: bytes):
        """
        Parses ALL messages from 'data' until it's exhausted or insufficient
        for another header. Returns a list of (message_type, parsed_message).
        """
        messages = []
        while True:
            if len(data) < 8:
                break

            potential_length = struct.unpack('!I', data[4:8])[0]
            if len(data) < potential_length:
                break

            remaining_data, message = MessageParser.deserialize_message(self.encryption_key, data)
            messages.append(message)
            data = remaining_data

        return messages

    async def handle_message(self, message):
        if isinstance(message, InitiateForwarderClientReq):
            await self.handle_initiate_forwarder_client_req({
                "IP Address": message.ip_address,
                "Port": message.port,
                "Forwarder Client ID": message.forwarder_client_id
            })

        elif isinstance(message, InitiateForwarderClientRep):
            asyncio.create_task(self.stream(message.forwarder_client_id))

        elif isinstance(message, SendDataMessage):
            forwarder_client = self.forwarder_clients.get(message.forwarder_client_id)
            if not forwarder_client:
                return
            forwarder_client.writer.write(message.data)

        else:
            print(f"Received unknown message type: {type(message).__name__}")

    @abstractmethod
    async def stream(self, message_id):
        raise NotImplementedError

    @abstractmethod
    async def send_downstream_message(self, message_data):
        raise NotImplementedError


class WebSocketClient(MessengerClient):
    def __init__(self, server_url: str, encryption_key, remote_port_forwards: str, proxy: str = None):
        super().__init__(encryption_key)
        self.server_url = server_url
        self.remote_port_forwards = remote_port_forwards
        self.proxy = proxy
        self.ws = None

    async def connect(self) -> str:
        """
        1) Start remote port forwards
        2) Create a session
        3) Open a WebSocket to self.server_url
        4) Perform an initial handshake (send CheckInMessage, wait for the server's check-in response)
        5) Return the messenger_id once received
        """
        await self.start_remote_port_forwards(self.remote_port_forwards)

        self.session = aiohttp.ClientSession(headers=self.headers)
        self.ws = await self.session.ws_connect(
            self.server_url,
            ssl=self.ssl_context,
            proxy=self.proxy
        )

        check_in_msg = self.serialize_messages([CheckInMessage(messenger_id='')])
        await self.ws.send_bytes(check_in_msg)

        while True:
            msg = await self.ws.receive()
            messages = self.deserialize_messages(msg.data)
            check_in_msg = messages[0]
            assert isinstance(check_in_msg, CheckInMessage), "Expected CheckInMessage, got something else"
            self.identifier = check_in_msg.messenger_id
            break

    async def start(self):
        async for msg in self.ws:
            messages = self.deserialize_messages(msg.data)
            for message in messages:
                try:
                    await self.handle_message(message)
                except:
                    continue

    async def stop(self):
        if self.ws is not None and not self.ws.closed:
            await self.ws.close()

        if self.session is not None and not self.session.closed:
            await self.session.close()

    async def send_downstream_message(self, downstream_message):
        downstream_messages = [CheckInMessage(messenger_id=self.identifier), downstream_message]
        await self.ws.send_bytes(self.serialize_messages(downstream_messages))

    async def stream(self, forwarder_client_identifier):
        forwarder_client = self.forwarder_clients[forwarder_client_identifier]
        while True:
            try:
                msg = await forwarder_client.reader.read(4096)
                if not msg:
                    break

                downstream_message = SendDataMessage(
                    forwarder_client_id=forwarder_client_identifier,
                    data=msg
                )
                await self.send_downstream_message(downstream_message)
            except (EOFError, ConnectionResetError):
                break

        downstream_message = SendDataMessage(
            forwarder_client_id=forwarder_client_identifier,
            data=b''
        )
        await self.send_downstream_message(downstream_message)
        del self.forwarder_clients[forwarder_client_identifier]

class SSLContextHTTPSHandler(urllib.request.HTTPSHandler):
    """
    A custom HTTPSHandler that always uses a given ssl.SSLContext.
    This allows us to avoid passing 'context' to opener.open(...) (which can fail),
    while still ignoring/self-signing as needed.
    """
    def __init__(self, context=None, debuglevel=0, check_hostname=False):
        super().__init__(debuglevel=debuglevel)
        self._context = context
        self._check_hostname = check_hostname

    def https_open(self, req):
        return self.do_open(
            http.client.HTTPSConnection,
            req,
            context=self._context,
            check_hostname=self._check_hostname
        )


class HTTPClient(MessengerClient):
    def __init__(self, server_url, encryption_key, remote_port_forwards: str, proxy: str = None):
        super().__init__(encryption_key)
        self.server_url = server_url
        self.remote_port_forwards = remote_port_forwards

        # Prepare headers
        self.headers = {'User-Agent': USER_AGENT}

        # Create an SSL context that ignores certificate validation
        self.ssl_context = ssl.create_default_context()
        self.ssl_context.check_hostname = False
        self.ssl_context.verify_mode = ssl.CERT_NONE

        # Build a ProxyHandler if 'proxy' was passed in; otherwise no proxy.
        if proxy:
            proxies = {
                'http': proxy,
                'https': proxy
            }
            proxy_handler = urllib.request.ProxyHandler(proxies)
        else:
            proxy_handler = urllib.request.ProxyHandler({})

        # Use our custom HTTPSHandler so we don't pass 'context=...' to .open()
        https_handler = SSLContextHTTPSHandler(context=self.ssl_context, check_hostname=False)

        # Create the opener using our proxy + custom HTTPS handler
        self.opener = urllib.request.build_opener(proxy_handler, https_handler)
        self.opener.addheaders = [('User-Agent', USER_AGENT)]

        # We will queue messages to send back to the server
        self.downstream_messages = asyncio.Queue()

    async def connect(self):
        await self.start_remote_port_forwards(self.remote_port_forwards)

        # Start by sending a CheckInMessage
        downstream_messages = [CheckInMessage(messenger_id='')]
        data_to_send = self.serialize_messages(downstream_messages)

        check_in_request = urllib.request.Request(
            self.server_url,
            headers=self.headers,
            data=data_to_send
        )

        # We no longer pass context=... here
        with self.opener.open(check_in_request) as response:
            if response.status != 200:
                return

            messages = self.deserialize_messages(response.read())
            check_in_msg = messages[0]
            assert isinstance(check_in_msg, CheckInMessage), "Expected CheckInMessage, got something else"
            self.identifier = check_in_msg.messenger_id

    async def start(self):
        while True:
            to_send = [CheckInMessage(messenger_id=self.identifier)]
            while not self.downstream_messages.empty():
                to_send.append(await self.downstream_messages.get())

            check_in_req = urllib.request.Request(
                self.server_url,
                headers=self.headers,
                data=self.serialize_messages(to_send)
            )

            try:
                # Also omit the context=... argument here.
                with self.opener.open(check_in_req) as response:
                    if response.status != 200:
                        break
                    raw_data = response.read()
                    messages = self.deserialize_messages(raw_data)
                    for message in messages:
                        try:
                            await self.handle_message(message)
                        except:
                            continue
            except Exception as e:
                print(f"HTTP polling failed with exception: {e}")
                break

            await asyncio.sleep(1.0)

    async def send_downstream_message(self, downstream_message):
        await self.downstream_messages.put(downstream_message)

    async def stream(self, forwarder_client_identifier):
        forwarder_client = self.forwarder_clients[forwarder_client_identifier]
        while True:
            try:
                msg = await forwarder_client.reader.read(4096)
                if not msg:
                    break

                downstream_message = SendDataMessage(
                    forwarder_client_id=forwarder_client_identifier,
                    data=msg
                )
                await self.send_downstream_message(downstream_message)
            except (EOFError, ConnectionResetError):
                break

        empty_message = SendDataMessage(
            forwarder_client_id=forwarder_client_identifier,
            data=b''
        )
        await self.send_downstream_message(empty_message)
        del self.forwarder_clients[forwarder_client_identifier]


class RemotePortForwarder:
    def __init__(self, messenger, config):
        self.messenger = messenger
        self.listening_host, self.listening_port, self.destination_host, self.destination_port = self.parse_config(
            config)
        self.name = 'Remote Port Forwarder'
        self.identifier = alphanumeric_identifier()

    async def handle_client(self, reader: asyncio.StreamReader, writer: asyncio.StreamWriter) -> None:
        forwarder_client = ForwarderClient(reader, writer)
        forwarder_client_id = alphanumeric_identifier()

        downstream_message = InitiateForwarderClientReq(
            forwarder_client_id=forwarder_client_id,
            ip_address=self.destination_host,
            port=int(self.destination_port)
        )
        await self.messenger.send_downstream_message(downstream_message)

        self.messenger.forwarder_clients[forwarder_client_id] = forwarder_client

    def parse_config(self, config):
        parts = config.split(':')
        return parts

    async def start(self):
        try:
            await asyncio.start_server(self.handle_client, self.listening_host, int(self.listening_port))
        except OSError:
            print(f'{self.listening_host}:{self.listening_port} is already in use.')
            return
        print(f'{self.name} {self.identifier} is listening on {self.listening_host}:{self.listening_port}')


class Messenger:
    def __init__(self, server_url, encryption_key, remote_port_forwards, proxy, continue_after_success):
        self.server_url = server_url
        self.encryption_key = encryption_key
        self.remote_port_forwards = remote_port_forwards
        self.proxy = proxy
        self.continue_after_success = continue_after_success
        self.connected_successfully = False

    async def start(self):
        remainder = self.server_url
        if "://" in self.server_url:
            scheme, remainder = self.server_url.split("://", 1)
            attempts = scheme.split('+')
        else:
            attempts = ["ws", "http", "wss", "https"]

        for attempt in attempts:
            if self.connected_successfully and not self.continue_after_success:
                return
            candidate_url = f"{attempt}://{remainder}/"
            if "http" in attempt:
                print('[*] Attempting to connect to Messenger Server over HTTP')
                await self.try_http(candidate_url, self.encryption_key, self.remote_port_forwards, self.proxy)
            if "ws" in attempt:
                print('[*] Attempting to connect to Messenger Server over WebSockets')
                if attempt == "wss":
                    candidate_url = f"https://{remainder}/"
                else:
                    candidate_url = f"http://{remainder}/"
                await self.try_ws(candidate_url, self.encryption_key, self.remote_port_forwards, self.proxy)
        print('Messenger Client stopped.')

    async def try_http(self, candidate_url, encryption_key, remote_port_forwards, proxy):
        try:
            messenger_client = HTTPClient(f'{candidate_url}{HTTP_ROUTE}', encryption_key, remote_port_forwards, proxy)
            await messenger_client.connect()
            if not messenger_client.identifier:
                print('[!] Failed to connect to Messenger Server over HTTP')
                return
            print(f'[+] Successfully connected to {self.server_url}{HTTP_ROUTE}')
            self.connected_successfully = True
            await messenger_client.start()
        except Exception as e:
            print(e)
            print('[!] Failed to connect to Messenger Server over HTTP')
            return

    async def try_ws(self, candidate_url, encryption_key, remote_port_forwards, proxy):
        messenger_client = WebSocketClient(f'{candidate_url}{WS_ROUTE}', encryption_key, remote_port_forwards, proxy)
        await messenger_client.connect()
        if not messenger_client.identifier:
            print('[!] Failed to connect to Messenger Server over WebSockets')
            return
        print(f'[+] Successfully connected to {self.server_url}/{WS_ROUTE}')
        self.connected_successfully = True
        await messenger_client.start()
        await messenger_client.stop()
        await messenger_client.stop()
        print('[!] Failed to connect to Messenger Server over WS')
        return


async def main(args):
    server_url = args.server_url.strip('/')
    encryption_key = generate_hash(args.encryption_key)
    remote_port_forwards = args.remote_port_forwards
    proxy = args.proxy
    continue_after_success = args.continue_after_success

    messenger = Messenger(server_url, encryption_key, remote_port_forwards, proxy, continue_after_success)
    await messenger.start()

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description="Messenger Client for establishing HTTP or WebSocket connections with remote port forwarding."
    )

    parser.add_argument(
        'server_url',
        type=str,
        help="The URL of the server to connect to. This should include the scheme (e.g. ws://, wss://, http://, https://) "
             "and the domain or IP address. For example: 'ws://example.com' or 'https://example.com'. "
             "If no scheme is provided, it will try 'ws', 'wss', 'http', and 'https'."
    )

    parser.add_argument(
        'encryption_key',
        type=str,
        help="The AES encryption key to use for encryption."
    )

    parser.add_argument(
        'remote_port_forwards',
        type=str,
        nargs='*',
        help="A list of remote port forwarding configurations. Each configuration should be in the format "
             "'listening_host:listening_port:destination_host:destination_port'. "
             "For example: '127.0.0.1:8080:example.com:80'. This sets up port forwarding from a local listening address "
             "and port to a remote destination address and port."
    )

    parser.add_argument(
        '--proxy',
        type=str,
        help="Optional proxy server URL."
    )

    parser.add_argument(
        '--continue-after-success',
        action='store_true',
        default=False,
        help='If a attempt were to fail after being successfully connected, continue trying other schemas.'
    )

    args = parser.parse_args()
    try:
        asyncio.run(main(args))
    except KeyboardInterrupt:
        print('\rMessenger Client stopped.')

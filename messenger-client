#!/usr/bin/env python3
import aiohttp
import asyncio
import argparse
import ssl
import sys
import urllib

from abc import ABC, abstractmethod
from urllib import request
from collections import namedtuple

from messenger.aes import encrypt, decrypt
from messenger.message import MessageParser, MessageBuilder
from messenger.generator import alphanumeric_identifier, generate_hash

ForwarderClient = namedtuple('ForwarderClient', 'reader writer')

HTTP_ROUTE = 'socketio/?EIO=4&transport=polling'
WS_ROUTE = 'socketio/?EIO=4&transport=websocket'
USER_AGENT = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:128.0) Gecko/20100101 Firefox/128.0'


class MessengerClient(ABC):
    def __init__(self):
        self.forwarder_clients = {}

        # Accept Self Signed SSL Certs
        self.ssl_context = ssl.create_default_context()
        self.ssl_context.check_hostname = False
        self.ssl_context.verify_mode = ssl.CERT_NONE
        # Change User Agent
        self.headers = {'User-Agent': USER_AGENT}

    async def handle_initiate_forwarder_client_req(self, message):
        try:
            reader, writer = await asyncio.wait_for(
                asyncio.open_connection(message['IP Address'], message['Port']),
                timeout=5  # Timeout after 5 seconds
            )
            self.forwarder_clients[message['Forwarder Client ID']] = ForwarderClient(reader, writer)
            bind_addr, bind_port = writer.get_extra_info('sockname')
            downstream_message = MessageBuilder.initiate_forwarder_client_rep(
                message['Forwarder Client ID'], bind_addr, bind_port, 0, 0
            )
            asyncio.create_task(self.stream(message['Forwarder Client ID']))
        except Exception:
            downstream_message = MessageBuilder.initiate_forwarder_client_rep(
                message['Forwarder Client ID'], '', 0, 0, 1
            )
        await self.send_downstream_message(downstream_message)

    async def start_remote_port_forwards(self, remote_port_forwards):
        for remote_port_forward in remote_port_forwards:
            remote_forward = RemotePortForwarder(self, remote_port_forward)
            await remote_forward.start()

    @abstractmethod
    async def stream(self, message_id):
        raise NotImplementedError

    @abstractmethod
    async def send_downstream_message(self, message_data):
        raise NotImplementedError


class WebSocketClient(MessengerClient):
    def __init__(self, uri: str, encryption_key, remote_port_forwards: str, proxy: str = None):
        super().__init__()
        self.uri = uri
        self.encryption_key = encryption_key
        self.remote_port_forwards = remote_port_forwards
        self.proxy = proxy
        self.ws = None

    async def connect(self):
        await self.start_remote_port_forwards(self.remote_port_forwards)
        async with aiohttp.ClientSession(headers=self.headers) as session:
            async with session.ws_connect(self.uri, ssl=self.ssl_context, proxy=self.proxy) as ws:
                print("Connected to WebSocket server")
                self.ws = ws
                async for msg in ws:
                    if msg.type == aiohttp.WSMsgType.BINARY:
                        decrypted_message = decrypt(self.encryption_key, msg.data)
                        asyncio.create_task(self.handle_message(decrypted_message))
                    elif msg.type == aiohttp.WSMsgType.CLOSED:
                        print("Connection closed")
                        break
                    elif msg.type == aiohttp.WSMsgType.ERROR:
                        print("Error received:", ws.exception())
                        break

    async def handle_message(self, data: bytes):
        header_info = MessageParser.header(data)
        message_type = header_info['Message Type']
        remaining_data = header_info['Value']

        if message_type == 0x01:
            message = MessageParser.initiate_forwarder_client_req(remaining_data)
            await self.handle_initiate_forwarder_client_req(message)
        elif message_type == 0x02:
            message = MessageParser.initiate_forwarder_client_rep(remaining_data)
            asyncio.create_task(self.stream(message['Forwarder Client ID']))
        elif message_type == 0x03:
            message = MessageParser.send_data(remaining_data)
            forwarder_client = self.forwarder_clients.get(message['Forwarder Client ID'], None)
            if not forwarder_client:
                return
            forwarder_client.writer.write(message['Data'])

    async def send_downstream_message(self, downstream_message):
        encrypted_downstream_message = encrypt(self.encryption_key, downstream_message)
        await self.ws.send_bytes(encrypted_downstream_message)

    async def stream(self, forwarder_client_identifier):
        forwarder_client = self.forwarder_clients[forwarder_client_identifier]
        while True:
            try:
                msg = await forwarder_client.reader.read(4096)
                if not msg:
                    break
                downstream_message = MessageBuilder.send_data(forwarder_client_identifier, msg)
                await self.send_downstream_message(downstream_message)
            except (EOFError, ConnectionResetError):
                break
        downstream_message = MessageBuilder.send_data(forwarder_client_identifier, b'')
        await self.send_downstream_message(downstream_message)
        del self.forwarder_clients[forwarder_client_identifier]


class HTTPClient(MessengerClient):
    def __init__(self, uri, encryption_key, remote_port_forwards: str, proxy: str = None):
        super().__init__()
        self.uri = uri
        self.encryption_key = encryption_key
        self.remote_port_forwards = remote_port_forwards
        proxies = {
            'http': '' if proxy is None else proxy,
            'https': '' if proxy is None else proxy
        }

        # ToDo: Support Proxies with HTTPClient

        self.messenger_id = None
        self.downstream_messages = asyncio.Queue()

    async def connect(self):
        await self.start_remote_port_forwards(self.remote_port_forwards)
        with request.urlopen(request.Request(self.uri, headers=self.headers), context=self.ssl_context) as response:
            self.messenger_id = response.read().decode('utf-8')
        print(f'[+] Successfully connected to {self.uri}')
        while True:
            downstream_messages = MessageBuilder.check_in(self.messenger_id)
            while not self.downstream_messages.empty():
                downstream_messages += await self.downstream_messages.get()
            check_in = request.Request(self.uri, headers=self.headers, data=encrypt(self.encryption_key, downstream_messages))
            with request.urlopen(check_in, context=self.ssl_context) as response:
                if response.status != 200:
                    break
                data = decrypt(self.encryption_key, response.read())
                messages = MessageParser.parse_messages(data)
                for message in messages:
                    try:
                        await self.handle_message(message)
                    except:
                        continue
            await asyncio.sleep(1.0)

    async def handle_message(self, message):
        message_type = message['Message Type']
        if message_type == 0x01:
            await self.handle_initiate_forwarder_client_req(message)
        elif message_type == 0x02:
            asyncio.create_task(self.stream(message['Forwarder Client ID']))
        elif message_type == 0x03:
            forwarder_client = self.forwarder_clients.get(message['Forwarder Client ID'], None)
            if not forwarder_client:
                return
            forwarder_client.writer.write(message['Data'])

    async def send_downstream_message(self, downstream_message):
        await self.downstream_messages.put(downstream_message)

    async def stream(self, forwarder_client_identifier):
        forwarder_client = self.forwarder_clients[forwarder_client_identifier]
        while True:
            try:
                msg = await forwarder_client.reader.read(4096)
                if not msg:
                    break
                downstream_message = MessageBuilder.send_data(forwarder_client_identifier, msg)
                await self.send_downstream_message(downstream_message)
            except (EOFError, ConnectionResetError):
                break
        downstream_message = MessageBuilder.send_data(forwarder_client_identifier, b'')
        await self.send_downstream_message(downstream_message)
        del self.forwarder_clients[forwarder_client_identifier]


class RemotePortForwarder:
    def __init__(self, messenger, config):
        self.messenger = messenger
        self.listening_host, self.listening_port, self.destination_host, self.destination_port = self.parse_config(config)
        self.name = 'Remote Port Forwarder'
        self.identifier = alphanumeric_identifier()

    async def handle_client(self, reader: asyncio.StreamReader, writer: asyncio.StreamWriter) -> None:
        forwarder_client = ForwarderClient(reader, writer)
        forwarder_client_id = alphanumeric_identifier()
        downstream_message = MessageBuilder.initiate_forwarder_client_req(
            forwarder_client_id, self.destination_host, int(self.destination_port)
        )
        await self.messenger.send_downstream_message(downstream_message)
        self.messenger.forwarder_clients[forwarder_client_id] = forwarder_client

    def parse_config(self, config):
        parts = config.split(':')
        return parts

    async def start(self):
        try:
            await asyncio.start_server(self.handle_client, self.listening_host, int(self.listening_port))
        except OSError:
            print(f'{self.listening_host}:{self.listening_port} is already in use.')
            return
        print(f'{self.name} {self.identifier} is listening on {self.listening_host}:{self.listening_port}')


async def try_http(url, encryption_key, remote_port_forwards, proxy):
    try:
        messenger_client = HTTPClient(f'{url}{HTTP_ROUTE}', encryption_key, remote_port_forwards, proxy)
        await messenger_client.connect()
        return True
    except:
        print(f'[-] Failed to connect to {url}')
        return False

async def try_ws(url, encryption_key, remote_port_forwards, proxy):
    try:
        messenger_client = WebSocketClient(f'{url}{WS_ROUTE}', encryption_key, remote_port_forwards, proxy)
        await messenger_client.connect()
        return True
    except:
        print(f'[-] Failed to connect to {url}')
        return False


async def main(args):
    uri = args.uri.strip('/')
    encryption_key = generate_hash(args.encryption_key)
    remote_port_forwards = args.remote_port_forwards
    proxy = args.proxy

    if "://" in uri:
        scheme, uri = uri.split("://", 1)
        attempts = scheme.split('+')
    else:
        attempts = ["ws", "http", "wss", "https"]

    for attempt in attempts:
        attempt_url = f"{attempt}://{uri}/"
        if "http" in attempt:
            success = await try_http(attempt_url, encryption_key, remote_port_forwards, proxy)
            if success:
                sys.exit(0)
        elif "ws" in attempt:
            success = await try_ws(attempt_url, encryption_key, remote_port_forwards, proxy)
            if success:
                sys.exit(0)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description="Messenger Client for establishing HTTP or WebSocket connections with remote port forwarding."
    )

    parser.add_argument(
        'uri',
        type=str,
        help="The URI of the server to connect to. This should include the scheme (e.g., ws://, wss://, http://, https://) and the domain or IP address. "
             "For example: 'ws://example.com' or 'https://example.com'. If no scheme is provided, it will try to connect using 'ws', 'wss', 'http', and 'https'."
    )

    parser.add_argument(
        'encryption_key',
        type=str,
        help="The AES encryption key to use for encryption."
    )


    parser.add_argument(
        'remote_port_forwards',
        type=str,
        nargs='*',
        help="A list of remote port forwarding configurations. Each configuration should be in the format "
             "'listening_host:listening_port:destination_host:destination_port'. "
             "For example: '127.0.0.1:8080:example.com:80'. This sets up port forwarding from a local listening address and port "
             "to a remote destination address and port."
    )

    parser.add_argument(
        '--proxy',
        type=str,
        help="Optional proxy server URL."
    )

    args = parser.parse_args()
    try:
        asyncio.run(main(args))
    except KeyboardInterrupt:
        print('\rMessenger Client stopped.')

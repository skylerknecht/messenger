#!/usr/bin/env python3
import asyncio
import argparse
import subprocess

from messenger.manager import Manager
from messenger import BANNER
from pathlib import Path

def update_submodules(repo_path='.', branch='main'):
    """
    Sync submodule URLs, initialize/update them, and then
    checkout the given branch and pull the latest in each.

    Args:
        repo_path (str or Path): Path to the superproject root.
        branch (str): Branch name to checkout & pull in each submodule.
    """
    repo_path = Path(repo_path)

    commands = [
        ['git', 'submodule', 'sync', '--recursive'],
        ['git', 'submodule', 'update', '--init', '--recursive'],
        ['git', 'submodule', 'foreach', '--recursive', f'git checkout {branch} && git pull']
    ]
    for cmd in commands:
        subprocess.run(cmd, cwd=repo_path, check=True)

async def main(banner, manager):
    parser = argparse.ArgumentParser()
    parser.add_argument("-a", "--address", type=str, default="0.0.0.0",
                        help="IP address the server should listen on. Default is '0.0.0.0'.")
    parser.add_argument("-p", "--port", type=int, default=8080,
                        help="Port number the server should listen on. Default is 8080.")
    parser.add_argument("-s", "--ssl", nargs=2, metavar=('CERT', 'KEY'), default=None,
                        help="SSL certificate and key files. Expect two strings: path to the certificate and path to "
                             "the key.")
    parser.add_argument(
        "--update-submodules", action="store_true",
        help="Run 'git submodule sync/update/foreach' before starting the CLI"
    )
    parser.add_argument("-e", "--encryption-key", type=str, default=None, help="The AES encryption key.")
    parser.add_argument("-q", "--quiet", action="store_true", help="Suppress the banner.")
    args = parser.parse_args()
    if args.update_submodules:
        update_submodules()
    if not args.quiet:
        print(banner)
    messenger_manager = manager(args.address, args.port, args.ssl, args.encryption_key)

    await messenger_manager.start_command_line_interface()

if __name__ == '__main__':
    try:
        asyncio.run(main(BANNER, Manager))
    except KeyboardInterrupt:
        print('\rMessenger Server stopped.')